use crate::util;						use crate::util;

use std::cmp::Ordering;						use std::cmp::Ordering;
use std::collections::{HashMap, HashSet, VecDeque};		use std::collections::{HashMap, HashSet, VecDeque};
use std::fmt::{Debug, Display};					use std::fmt::{Debug, Display};
use std::iter::zip;						use std::iter::zip;

use crate::aoc::AOC;						use crate::aoc::AOC;

#[derive(Clone, Eq, PartialEq, Hash)]				#[derive(Clone, Eq, PartialEq, Hash)]
struct State {							struct State {
    grid: Vec<Vec<Vec<char>>>,				      |	    grid: Vec<Vec<u8>>,
    pos: (usize, usize),					    pos: (usize, usize),
}								}

							      >
							      >	const LEFT:  u8 = 0b1;
							      >	const RIGHT: u8 = 0b10;
							      >	const UP:    u8 = 0b100;
							      >	const DOWN:  u8 = 0b1000;
							      >
impl State {							impl State {
    fn new(grid: Vec<Vec<Vec<char>>>, pos: (usize, usize)) -> |	    fn new(grid: Vec<Vec<u8>>, pos: (usize, usize)) -> Self {
        Self { grid, pos }					        Self { grid, pos }
    }								    }

    fn undo_move_blizzards(&mut self) {				    fn undo_move_blizzards(&mut self) {
        let rows = self.grid.len();				        let rows = self.grid.len();
        let cols = self.grid[0].len();				        let cols = self.grid[0].len();
        let mut new_grid = vec![vec![vec![]; cols]; rows];    |	        let mut new_grid = vec![vec![0; cols]; rows];

        for (row, row_item) in self.grid.iter().enumerate().t	        for (row, row_item) in self.grid.iter().enumerate().t
            for (col, col_item) in row_item.iter().enumerate( |	            for (col, item) in row_item.iter().enumerate().ta
                for c in col_item {			      |	                if item & LEFT >= 1 {
                    match c {				      |	                    let col = if col == cols - 2 { 1 } else {
                        '.' => {			      |	                    new_grid[row][col] |= LEFT;
                            break;			      <
                        }				      <
                        '<' => {			      <
                            if col == cols - 2 {	      <
                                new_grid[row][1].push('<');   <
                            } else {			      <
                                new_grid[row][col + 1].push(' <
                            }				      <
                        }				      <
                        '>' => {			      <
                            if col == 1 {		      <
                                new_grid[row][cols - 2].push( <
                            } else {			      <
                                new_grid[row][col - 1].push(' <
                            }				      <
                        }				      <
                        '^' => {			      <
                            if row == rows - 2 {	      <
                                new_grid[1][col].push('^');   <
                            } else {			      <
                                new_grid[row + 1][col].push(' <
                            }				      <
                        }				      <
                        'v' => {			      <
                            if row == 1 {		      <
                                new_grid[rows - 2][col].push( <
                            } else {			      <
                                new_grid[row - 1][col].push(' <
                            }				      <
                        }				      <
                        _ => panic!("{c}"),		      <
                    }					      <
                }						                }
            }						      |	                if item & RIGHT >= 1 {
        }						      |	                    let col = if col == 1 { cols - 2 } else {
							      |	                    new_grid[row][col] |= RIGHT;
        // fill empty pos with '.'			      |	                }
        for row in new_grid.iter_mut().take(rows - 1).skip(1) |	                if item & UP >= 1 {
            for pos in row.iter_mut().take(cols - 1).skip(1)  |	                    let row = if row == rows - 2 { 1 } else {
                if pos.is_empty() {			      |	                    new_grid[row][col] |= UP;
                    pos.push('.');			      |	                }
							      >	                if item & DOWN >= 1 {
							      >	                    let row = if row == 1 { rows - 2 } else {
							      >	                    new_grid[row][col] |= DOWN;
                }						                }
            }							            }
        }							        }

        self.grid = new_grid;					        self.grid = new_grid;
    }								    }

    fn move_blizzards(&mut self) {				    fn move_blizzards(&mut self) {
        let rows = self.grid.len();				        let rows = self.grid.len();
        let cols = self.grid[0].len();				        let cols = self.grid[0].len();
        let mut new_grid = vec![vec![vec![]; cols]; rows];    |	        let mut new_grid = vec![vec![0; cols]; rows];

        for (row, row_item) in self.grid.iter().enumerate().t	        for (row, row_item) in self.grid.iter().enumerate().t
            for (col, col_item) in row_item.iter().enumerate( |	            for (col, item) in row_item.iter().enumerate().ta
                for c in col_item {			      |	                if item & LEFT >= 1 {
                    match c {				      |	                    let col = if col == 1 { cols - 2 } else {
                        '.' => {			      |	                    new_grid[row][col] |= LEFT;
                            break;			      <
                        }				      <
                        '<' => {			      <
                            if col == 1 {		      <
                                new_grid[row][cols - 2].push( <
                            } else {			      <
                                new_grid[row][col - 1].push(' <
                            }				      <
                        }				      <
                        '>' => {			      <
                            if col == cols - 2 {	      <
                                new_grid[row][1].push('>');   <
                            } else {			      <
                                new_grid[row][col + 1].push(' <
                            }				      <
                        }				      <
                        '^' => {			      <
                            if row == 1 {		      <
                                new_grid[rows - 2][col].push( <
                            } else {			      <
                                new_grid[row - 1][col].push(' <
                            }				      <
                        }				      <
                        'v' => {			      <
                            if row == rows - 2 {	      <
                                new_grid[1][col].push('v');   <
                            } else {			      <
                                new_grid[row + 1][col].push(' <
                            }				      <
                        }				      <
                        _ => panic!("{c}"),		      <
                    }					      <
                }						                }
            }						      |	                if item & RIGHT >= 1 {
        }						      |	                    let col = if col == cols - 2 { 1 } else {
							      |	                    new_grid[row][col] |= RIGHT;
        // fill empty pos with '.'			      |	                }
        for row in new_grid.iter_mut().take(rows - 1).skip(1) |	                if item & UP >= 1 {
            for pos in row.iter_mut().take(cols - 1).skip(1)  |	                    let row = if row == 1 { rows - 2 } else {
                if pos.is_empty() {			      |	                    new_grid[row][col] |= UP;
                    pos.push('.');			      |	                }
							      >	                if item & DOWN >= 1 {
							      >	                    let row = if row == rows - 2 { 1 } else {
							      >	                    new_grid[row][col] |= DOWN;
                }						                }
            }							            }
        }							        }

        self.grid = new_grid;					        self.grid = new_grid;
    }								    }

    fn draw(&self) {						    fn draw(&self) {
        for r in 1..self.grid.len() - 1 {			        for r in 1..self.grid.len() - 1 {
            for c in 1..self.grid[0].len() - 1 {		            for c in 1..self.grid[0].len() - 1 {
                /*if self.pos.0 == r && self.pos.1 == c {     |	                let l = match self.grid[r][c] {
                    print!("E");			      |	                    LEFT => '<',
                } else */				      |	                    RIGHT => '>',
                if self.grid[r][c].len() > 1 {		      |	                    UP => '^',
                    print!("{}", self.grid[r][c].len());      |	                    DOWN => 'v',
                } else {				      |	                    0 => '.',
                    print!("{}", self.grid[r][c][0]);	      |	                    _ => '*',
                }					      |	                };
							      >	                print!("{l}");
            }							            }
            println!();						            println!();
        }							        }
    }								    }

    fn position_contain_blizzard(&self, r: usize, c: usize) -	    fn position_contain_blizzard(&self, r: usize, c: usize) -
        for p in &self.grid[r][c] {			      |	        if self.grid[r][c] & LEFT != 0 ||
            match p {					      |	            self.grid[r][c] & RIGHT != 0 ||
                '<' | '>' | '^' | 'v' => return true,	      |	            self.grid[r][c] & UP != 0 ||
                _ => continue,				      |	            self.grid[r][c] & DOWN != 0 {
            }						      |	                true
							      >	        } else {
							      >	            false
        }							        }
        false						      <
    }								    }

    fn get_key(&self) -> Vec<u16> {			      |	    fn get_key(&self) -> Vec<u32> {
        const fn l_to_n(l: char) -> usize {		      <
            match l {					      <
                '<' => 1,				      <
                '>' => 2,				      <
                '^' => 3,				      <
                'v' => 4,				      <
                _ => 10,				      <
            }						      <
        }						      <
        let mut key = vec![];					        let mut key = vec![];
        for (r, row) in self.grid.iter().enumerate() {		        for (r, row) in self.grid.iter().enumerate() {
            for (c, p) in row.iter().enumerate() {		            for (c, p) in row.iter().enumerate() {
                for l in p {				      |	                if *p > 0 {
                    match l {				      |	                    key.push((*p as usize * 10_000 + (r + 1) 
                        '<' | '>' | '^' | 'v' => {	      <
                            key.push((l_to_n(*l) * 10_000 + ( <
                        }				      <
                        _ => continue,			      <
                    }					      <
                }						                }
            }							            }
        }							        }
        key.push((self.pos.0 * 100 + self.pos.1) as u16);     |	        key.push((self.pos.0 * 100 + self.pos.1) as u32);
        key							        key
    }								    }
}								}

/*							      |	fn draw(grid: &[Vec<u8>]) {
							      |	    let rows = grid.len();
Maybe encode directions in chars if it uses too much memory . |	    let cols = grid[0].len();
							      |	    for r in 0..rows {
4: blizard in all directions				      |	        for c in 0..cols {
							      |	            if r == 0 || r == rows - 1 || c == 0 || c == cols
<>: A							      <
<^: B							      <
<v: C							      <
>^: D							      <
>v: E							      <
^: F							      <
v							      <
<>^: A							      <
							      <
							      <
*/							      <
							      <
fn draw(grid: &[Vec<Vec<char>>]) {			      <
    for r in 0..grid.len() {				      <
        for c in 0..grid[0].len() {			      <
            if grid[r][c].len() > 1 {			      <
                print!("{}", grid[r][c].len());		      <
            } else if grid[r][c].len() == 1 {		      <
                print!("{}", grid[r][c][0]);		      <
            } else {					      <
                print!("#");					                print!("#");
							      >	            } else {
							      >	                let l = match grid[r][c] {
							      >	                    LEFT => '<',
							      >	                    RIGHT => '>',
							      >	                    UP => '^',
							      >	                    DOWN => 'v',
							      >	                    0 => '.',
							      >	                    _ => '*',
							      >	                };
							      >	                print!("{l}");
            }							            }
        }							        }
        println!();						        println!();
    }								    }
}								}

type Pos = (usize, usize);					type Pos = (usize, usize);

fn dfs(								fn dfs(
    visited: &mut HashMap<Vec<u16>, u32>,		      |	    visited: &mut HashMap<Vec<u32>, u16>,
    last_pos: Pos,						    last_pos: Pos,
    minutes: u32,					      |	    minutes: u16,
    state: &mut State,						    state: &mut State,
    ans: &mut u32,					      |	    ans: &mut u16,
    rows: usize,						    rows: usize,
    cols: usize,						    cols: usize,
    final_grid: &mut Vec<Vec<Vec<char>>>,		      |	    final_grid: &mut Vec<Vec<u8>>,
) {								) {
    let key = state.get_key();					    let key = state.get_key();
    match visited.get(&key) {					    match visited.get(&key) {
        Some(m) => {						        Some(m) => {
            if *m <= minutes {					            if *m <= minutes {
                return;						                return;
            }							            }
            visited.insert(key, minutes);			            visited.insert(key, minutes);
        }							        }
        None => {						        None => {
            visited.insert(key, minutes);			            visited.insert(key, minutes);
        }							        }
    }								    }

    if state.pos == last_pos {					    if state.pos == last_pos {
        if minutes < *ans {					        if minutes < *ans {
            println!("best min is now: {}", minutes);		            println!("best min is now: {}", minutes);
            *ans = minutes;					            *ans = minutes;
            *final_grid = state.grid.clone();			            *final_grid = state.grid.clone();
            // println!("======== FINAL GRID =======");	      |	            //println!("======== FINAL GRID =======");
            // state.draw();				      |	            //state.draw();
            //draw(&final_grid);				            //draw(&final_grid);
            //dbg!(final_grid);					            //dbg!(final_grid);
            // println!("^^^^^^^^^^^^^^^^^^^^^^^^^^^");	      |	            //println!("^^^^^^^^^^^^^^^^^^^^^^^^^^^");
        }							        }
        return;							        return;
    }								    }

    if minutes >= *ans {					    if minutes >= *ans {
        // can only get worse, so return			        // can only get worse, so return
        return;							        return;
    }								    }

    // move blizzards, then check where we can go		    // move blizzards, then check where we can go
    state.move_blizzards();					    state.move_blizzards();

    // let mut you_moved = false;				    // let mut you_moved = false;

    // right							    // right
    if state.pos.1 < cols - 2 && !state.position_contain_bliz	    if state.pos.1 < cols - 2 && !state.position_contain_bliz
        // you_moved = true;					        // you_moved = true;
        state.pos = (state.pos.0, state.pos.1 + 1);		        state.pos = (state.pos.0, state.pos.1 + 1);
        dfs(							        dfs(
            visited,						            visited,
            last_pos,						            last_pos,
            minutes + 1,					            minutes + 1,
            state,						            state,
            ans,						            ans,
            rows,						            rows,
            cols,						            cols,
            final_grid,						            final_grid,
        );							        );
        state.pos = (state.pos.0, state.pos.1 - 1);		        state.pos = (state.pos.0, state.pos.1 - 1);
    }								    }

    // left							    // left
    if state.pos.1 > 1 && !state.position_contain_blizzard(st	    if state.pos.1 > 1 && !state.position_contain_blizzard(st
        // you_moved = true;					        // you_moved = true;
        state.pos = (state.pos.0, state.pos.1 - 1);		        state.pos = (state.pos.0, state.pos.1 - 1);
        dfs(							        dfs(
            visited,						            visited,
            last_pos,						            last_pos,
            minutes + 1,					            minutes + 1,
            state,						            state,
            ans,						            ans,
            rows,						            rows,
            cols,						            cols,
            final_grid,						            final_grid,
        );							        );
        state.pos = (state.pos.0, state.pos.1 + 1);		        state.pos = (state.pos.0, state.pos.1 + 1);
    }								    }

    // up							    // up
    if state.pos.0 > 1 && !state.position_contain_blizzard(st	    if state.pos.0 > 1 && !state.position_contain_blizzard(st
        // you_moved = true;					        // you_moved = true;
        state.pos = (state.pos.0 - 1, state.pos.1);		        state.pos = (state.pos.0 - 1, state.pos.1);
        dfs(							        dfs(
            visited,						            visited,
            last_pos,						            last_pos,
            minutes + 1,					            minutes + 1,
            state,						            state,
            ans,						            ans,
            rows,						            rows,
            cols,						            cols,
            final_grid,						            final_grid,
        );							        );
        state.pos = (state.pos.0 + 1, state.pos.1);		        state.pos = (state.pos.0 + 1, state.pos.1);
    }								    }

    // down							    // down
    if state.pos.0 < rows - 2 && !state.position_contain_bliz	    if state.pos.0 < rows - 2 && !state.position_contain_bliz
        // you_moved = true;					        // you_moved = true;
        state.pos = (state.pos.0 + 1, state.pos.1);		        state.pos = (state.pos.0 + 1, state.pos.1);
        dfs(							        dfs(
            visited,						            visited,
            last_pos,						            last_pos,
            minutes + 1,					            minutes + 1,
            state,						            state,
            ans,						            ans,
            rows,						            rows,
            cols,						            cols,
            final_grid,						            final_grid,
        );							        );
        state.pos = (state.pos.0 - 1, state.pos.1);		        state.pos = (state.pos.0 - 1, state.pos.1);
    }								    }

    // wait							    // wait
    if !state.position_contain_blizzard(state.pos.0, state.po	    if !state.position_contain_blizzard(state.pos.0, state.po
        // you_moved = true;					        // you_moved = true;
        dfs(							        dfs(
            visited,						            visited,
            last_pos,						            last_pos,
            minutes + 1,					            minutes + 1,
            state,						            state,
            ans,						            ans,
            rows,						            rows,
            cols,						            cols,
            final_grid,						            final_grid,
        );							        );
    }								    }

    // if !you_moved {						    // if !you_moved {
    //     println!("You got killed! ({}, {}), minutes = {min	    //     println!("You got killed! ({}, {}), minutes = {min
    //     state.draw();					    //     state.draw();
    // }							    // }

    state.undo_move_blizzards();				    state.undo_move_blizzards();
}								}

const MAX_MINUTES: u32 = 270;				      |	const MAX_MINUTES: u16 = 270;

fn part1(input: String) -> String {				fn part1(input: String) -> String {
    let mut min_minutes = MAX_MINUTES; //			    let mut min_minutes = MAX_MINUTES; //
    let grid = parse(input);					    let grid = parse(input);
    let rows = grid.len();					    let rows = grid.len();
    let cols = grid[0].len();					    let cols = grid[0].len();
    let initial_pos = (0, 1);					    let initial_pos = (0, 1);
    let last_pos = (grid.len() - 2, grid[0].len() - 2); // ro	    let last_pos = (grid.len() - 2, grid[0].len() - 2); // ro
                                                        // db	                                                        // db

    let mut initial_state = State::new(grid, initial_pos);	    let mut initial_state = State::new(grid, initial_pos);
    initial_state.move_blizzards();				    initial_state.move_blizzards();
    // Enter grid						    // Enter grid
    initial_state.pos = (1, 1);					    initial_state.pos = (1, 1);

    let mut final_grid: Vec<Vec<Vec<char>>> = vec![];	      |	    let mut final_grid: Vec<Vec<u8>> = vec![];
    let mut visited: HashMap<Vec<u16>, u32> = HashMap::new(); |	    let mut visited: HashMap<Vec<u32>, u16> = HashMap::new();

    dfs(							    dfs(
        &mut visited,						        &mut visited,
        last_pos,						        last_pos,
        1,							        1,
        &mut initial_state,					        &mut initial_state,
        &mut min_minutes,					        &mut min_minutes,
        rows,							        rows,
        cols,							        cols,
        &mut final_grid,					        &mut final_grid,
    );								    );

    (min_minutes + 1).to_string()				    (min_minutes + 1).to_string()
}								}

/// initial and final position "inside" the grid		/// initial and final position "inside" the grid
fn solve(							fn solve(
    grid: Vec<Vec<Vec<char>>>,				      |	    grid: Vec<Vec<u8>>,
    initial_pos: Pos,						    initial_pos: Pos,
    final_pos: Pos,						    final_pos: Pos,
) -> (u32, Vec<Vec<Vec<char>>>) {			      |	) -> (u16, Vec<Vec<u8>>) {
    println!("Trying to get from {:?} to {:?}", initial_pos, 	    println!("Trying to get from {:?} to {:?}", initial_pos, 
    let mut min_minutes = MAX_MINUTES;				    let mut min_minutes = MAX_MINUTES;
    let mut final_grid: Vec<Vec<Vec<char>>> = vec![];	      |	    let mut final_grid = vec![];

    let mut minutes = 0;					    let mut minutes = 0;
    let rows = grid.len();					    let rows = grid.len();
    let cols = grid[0].len();					    let cols = grid[0].len();
    let mut initial_state = State::new(grid, initial_pos);	    let mut initial_state = State::new(grid, initial_pos);

    println!("=========== INITIAL STATE =============");	    println!("=========== INITIAL STATE =============");

    while minutes < 15 {					    while minutes < 15 {
        initial_state.draw();					        initial_state.draw();
        minutes += 1;						        minutes += 1;
        initial_state.move_blizzards();				        initial_state.move_blizzards();

        while initial_state.position_contain_blizzard(initial	        while initial_state.position_contain_blizzard(initial
            println!("It can't enter the grid. minutes: {minu	            println!("It can't enter the grid. minutes: {minu
            // initial_state.draw();				            // initial_state.draw();
            minutes += 1;					            minutes += 1;
            initial_state.move_blizzards();			            initial_state.move_blizzards();
        }							        }

        let mut visited: HashMap<Vec<u16>, u32> = HashMap::ne |	        let mut visited: HashMap<Vec<u32>, u16> = HashMap::ne
        // println!("------grid before dfs-------");		        // println!("------grid before dfs-------");
        // initial_state.draw();				        // initial_state.draw();
        dfs(							        dfs(
            &mut visited,					            &mut visited,
            final_pos,						            final_pos,
            minutes,						            minutes,
            &mut initial_state,					            &mut initial_state,
            &mut min_minutes,					            &mut min_minutes,
            rows,						            rows,
            cols,						            cols,
            &mut final_grid,					            &mut final_grid,
        );							        );

        if !final_grid.is_empty() {				        if !final_grid.is_empty() {
            break;						            break;
        }							        }

        println!("It didn't find a solution. Let's try again.	        println!("It didn't find a solution. Let's try again.
    }								    }

    if final_grid.is_empty() {					    if final_grid.is_empty() {
        panic!("Mission Failed");				        panic!("Mission Failed");
    }								    }

    println!("--->> debugging final grid");			    println!("--->> debugging final grid");
    draw(&final_grid);						    draw(&final_grid);

    // before return, we need to move blizzards in the final 	    // before return, we need to move blizzards in the final 
    initial_state.grid = final_grid;				    initial_state.grid = final_grid;
    initial_state.move_blizzards();				    initial_state.move_blizzards();

    (min_minutes + 1, initial_state.grid)			    (min_minutes + 1, initial_state.grid)
}								}

fn part2(input: String) -> String {				fn part2(input: String) -> String {
    let mut sum = 0;						    let mut sum = 0;
    let grid = parse(input);					    let grid = parse(input);
    let initial_pos = (1, 1);					    let initial_pos = (1, 1);
    // row, col							    // row, col
    let last_pos = (grid.len() - 2, grid[0].len() - 2);		    let last_pos = (grid.len() - 2, grid[0].len() - 2);

    // go							    // go
    let (minutes, grid) = solve(grid, initial_pos, last_pos);	    let (minutes, grid) = solve(grid, initial_pos, last_pos);
    sum += minutes;						    sum += minutes;

    // go back							    // go back
    let (minutes, grid) = solve(grid, last_pos, (1, 1));	    let (minutes, grid) = solve(grid, last_pos, (1, 1));
    sum += minutes;						    sum += minutes;

    // go again							    // go again
    let (minutes, _) = solve(grid, initial_pos, last_pos);	    let (minutes, _) = solve(grid, initial_pos, last_pos);
    sum += minutes;						    sum += minutes;

    sum.to_string()						    sum.to_string()
}								}

fn parse(input: String) -> Vec<Vec<Vec<char>>> {	      |	fn parse(input: String) -> Vec<Vec<u8>> {
    let mut grid: Vec<Vec<Vec<char>>> = vec![];		      |	    let mut grid = vec![];
    for line in input.lines() {					    for line in input.lines() {
        let mut row = vec![];					        let mut row = vec![];
        for c in line.chars() {					        for c in line.chars() {
            row.push(vec![c]);				      |	            match c {
							      >	                '<' => row.push(LEFT),
							      >	                '>' => row.push(RIGHT),
							      >	                '^' => row.push(UP),
							      >	                'v' => row.push(DOWN),
							      >	                _ => row.push(0),
							      >	            }
        }							        }
        grid.push(row);						        grid.push(row);
    }								    }
							      >	    println!("parsed grid:");
							      >	    draw(&grid);
    grid							    grid
}								}

#[cfg(test)]							#[cfg(test)]
mod tests {							mod tests {
    use super::*;						    use super::*;

    #[test]							    #[test]
    fn part1_sample() {						    fn part1_sample() {
        let input = util::read_file("inputs/day24-sample2.txt	        let input = util::read_file("inputs/day24-sample2.txt
        assert_eq!("18", part1(input));				        assert_eq!("18", part1(input));
    }								    }

    #[test]							    #[test]
    fn part1_input() {						    fn part1_input() {
        let input = util::read_file("inputs/day24.txt");      |	       let input = util::read_file("inputs/day24.txt");
        assert_eq!("240", part1(input));		      |	       assert_eq!("240", part1(input));
    }								    }

    #[test]							    #[test]
    fn part2_sample() {						    fn part2_sample() {
        let input = util::read_file("inputs/day24-sample2.txt |	       let input = util::read_file("inputs/day24-sample2.txt"
        assert_eq!("54", part2(input));			      |	       assert_eq!("54", part2(input));
    }								    }

    #[test]							    #[test]
    fn part2_input() {						    fn part2_input() {
       let input = util::read_file("inputs/day24.txt");	      |	      let input = util::read_file("inputs/day24.txt");
       assert_eq!("717", part2(input));			      |	      assert_eq!("717", part2(input));
    }								    }
}								}

#[allow(dead_code)]						#[allow(dead_code)]
fn dbg<T: Debug + Display>(grid: &[Vec<T>]) {			fn dbg<T: Debug + Display>(grid: &[Vec<T>]) {
    for item in grid {						    for item in grid {
        println!("{item:?}");					        println!("{item:?}");
    }								    }
}								}

pub struct Day24 {}						pub struct Day24 {}

impl AOC for Day24 {						impl AOC for Day24 {
    fn part1(&self, input: Option<String>, args: Vec<String>)	    fn part1(&self, input: Option<String>, args: Vec<String>)
        println!(						        println!(
            "sample answer: {}",				            "sample answer: {}",
            part1(util::read_file("inputs/day24-sample2.txt")	            part1(util::read_file("inputs/day24-sample2.txt")
        );							        );
        let input = match input {				        let input = match input {
            Some(input) => input,				            Some(input) => input,
            None => util::read_file("inputs/day24.txt"),	            None => util::read_file("inputs/day24.txt"),
        };							        };
        part1(input)						        part1(input)
    }								    }

    fn part2(&self, input: Option<String>, args: Vec<String>)	    fn part2(&self, input: Option<String>, args: Vec<String>)
        println!(						        println!(
            "sample answer: {}",				            "sample answer: {}",
            part2(util::read_file("inputs/day24-sample2.txt")	            part2(util::read_file("inputs/day24-sample2.txt")
        );							        );
        let input = match input {				        let input = match input {
            Some(input) => input,				            Some(input) => input,
            None => util::read_file("inputs/day24.txt"),	            None => util::read_file("inputs/day24.txt"),
        };							        };
        part2(input)						        part2(input)
    }								    }
}								}
